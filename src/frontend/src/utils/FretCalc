export const calc_frets = (frets) => {
    // First handle simple cases where we don't need normalization
    const allNumbers = frets.filter(f => typeof f === 'number');
    if (allNumbers.length === 0) return frets.map(f => f === 0 ? 'O' : f);
    
    const minFret = Math.min(...allNumbers.filter(f => f > 0)); // ignore 0s for min calculation
    const maxFret = Math.max(...allNumbers);
    
    // Don't normalize if maxFret is already <= 4
    if (maxFret <= 4) {
      return frets.map(f => {
          if (f === 0) return 'O';
          if (f === 'x') return 'x';
          return f;
      });
  }
  
    
    // Only normalize if minFret > 4
    return frets.map(f => {
        if (f === 0) return 'O';
        if (f === 'x') return 'x';
        const normalizedFret = f - minFret + 1;
        return normalizedFret >= 5 ? 'x' : normalizedFret;
    });
};
  
export const display_fret = (positions) => {
  if (!positions || positions.length === 0) return '1';

  // Filter out non-numbers (like 'x') but keep 0s
  const numericPositions = positions.filter(
    pos => typeof pos === 'number' || pos === '0'
  ).map(Number);

  if (numericPositions.length === 0) return '1';

  // Get playable frets (excluding open strings, i.e., 0s)
  const playableFrets = numericPositions.filter(f => f > 0);

  // If no fretted notes, return '1'
  if (playableFrets.length === 0) return '1';

  const minFret = Math.min(...playableFrets);
  const maxFret = Math.max(...playableFrets);

  // If minFret is 0 somehow (shouldn't be), return '1'
  if (minFret === 0) return '1';

  // Check if any normalized position would be â‰¥5
  const wouldNormalizeToX = playableFrets.some(f => (f - minFret + 1) >= 5);
  if (wouldNormalizeToX) return String(minFret);

  // If maxFret > 4, only consider playable frets (ignore open strings)
  const candidates = maxFret > 4 ? playableFrets : numericPositions;

  const result = Math.min(...candidates);
  return result === 0 ? '1' : String(result);
};
