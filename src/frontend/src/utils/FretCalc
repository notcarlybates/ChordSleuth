export const calc_frets = (frets) => {
    const playableFrets = frets.filter(f => f !== 0 && f !== 'x' && typeof f === 'number');
    if (playableFrets.length === 0) return frets.map(f => f === 0 ? 'O' : f);
    
    const minFret = Math.min(...playableFrets);
    const maxFret = Math.max(...playableFrets);
    
    return frets.map(f => {
      if (f === 0) return 'O';
      if (f === 'x') return 'x';
      
      const normalizedFret = f - minFret + 1; // +1 to make fret numbers start at 1
      return normalizedFret >= 5 ? 'x' : normalizedFret;
    });
  };
  
  export const display_fret = (positions) => {
    if (!positions || positions.length === 0) return '';
  
    // Filter out non-numbers (like 'x') but keep 0s for now
    const numericPositions = positions.filter(
      pos => typeof pos === 'number' || pos === '0'
    ).map(Number);
  
    if (numericPositions.length === 0) return '';
  
    // Get playable frets (excluding 0s)
    const playableFrets = numericPositions.filter(f => f !== 0);
    
    // If no playable frets, return empty string
    if (playableFrets.length === 0) return '';
  
    const minFret = Math.min(...playableFrets);
    const maxFret = Math.max(...playableFrets);
  
    // Check if any normalized position would be â‰¥5
    const wouldNormalizeToX = playableFrets.some(f => (f - minFret + 1) >= 5);
    if (wouldNormalizeToX) return minFret;
  
    // If maxFret > 4, only consider playable frets (ignore open strings)
    const candidates = maxFret > 4 ? playableFrets : numericPositions;
  
    return Math.min(...candidates);
  };